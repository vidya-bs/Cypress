
def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

def getBuildUser() {
    return currentBuild.rawBuild.getCause(Cause.UserIdCause).getUserId()
}

pipeline {
   agent any
     environment {
        BUILD_USER = ''
    }
   stages {
       stage('git checkout') {
            steps {
               sh '''
                ssh apiwiz@34.102.79.102 -o StrictHostKeyChecking=no  << EOM
                sudo -i
                rm -rf /tmp/Cypress
                cd /tmp
                git clone git@github.com:itorix/Cypress.git
                cd Cypress 
                git checkout develop

               '''
            }
        }

        stage('Install all dependencies') {
            steps {
               sh '''
                ssh apiwiz@34.102.79.102 -o StrictHostKeyChecking=no  << EOM
                sudo -i
                cd /tmp/Cypress
                npm i
               '''
            }
        }


       stage('Run Test cases ') {
           steps {
               sh '''

               ssh apiwiz@34.102.79.102 -o StrictHostKeyChecking=no  << EOM
               sudo -i 
               cd /tmp/Cypress
               npx cypress run --spec cypress/e2e/integration/Registration/astrumregistration/loginToAstrum.cy.js --browser chrome
               
               '''
           }
       }
     
   }



post {
        always {
            //The script step takes a block of Scripted Pipeline and executes that in the Declarative Pipeline. 
            //For most use-cases, the script step should be unnecessary in Declarative Pipelines, but it can provide
            //a useful "escape hatch." script blocks of non-trivial size and/or complexity should be moved into Shared Libraries instead.
            script {
                BUILD_USER = getBuildUser()
            }
            
            slackSend channel: '#jenkins-example',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} by ${BUILD_USER}\n More info at: ${env.BUILD_URL}HTML_20Report/"
            
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'cypress/report', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
            deleteDir()
        }
    }





}